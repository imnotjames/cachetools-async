[project]
name = "cachetools-async"
version = "0.0.4"
description = "Provides decorators that are inspired by and work closely with cachetools' for caching asyncio functions and methods."
authors = [
    { name = "James Ward", email = "james@notjam.es" }
]
license = "MIT"
readme = "README.md"
requires-python = ">=3.9"
dependencies = [
    "cachetools>=5",
]

[project.urls]
Repository = "https://github.com/imnotjames/cachetools-async.git"
Issues = "https://github.com/imnotjames/cachetools-async/issues"

[dependency-groups]
dev = [
    "pytest~=8.1.1",
    "pytest-asyncio~=0.23.6",
    "pytest-cov~=5.0.0",
    "pyright>=1.1.390",
    "ruff>=0.8.2",
]

[tool.pytest.ini_options]
xfail_strict = true
addopts = "-p no:warnings"
asyncio_mode = "auto"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.ruff.lint]
preview = true
select = [
    "E4",       # Import rules
    "E7",       # Statement rules
    "E9",       # Runtime rules
    "F",        # All Pyflakes rules
    "B006",     # mutable-argument-default: Do not use mutable data structures for argument defaults
    "B008",     # function-call-in-default-argument: Do not perform function call {name} in argument defaults;
    "PIE790",   # unnecessary-placeholder: Unnecessary pass statement
    "S303",     # suspicious-insecure-hash-usage: Use of insecure MD2, MD4, MD5, or SHA1 hash function
    "S324",     # hashlib-insecure-hash-function: Probable use of insecure hash functions in {library}: {string}
    "I",        # All isort rules
    "D",        # All pydocstyle rules
]
ignore = [
    "D1",       # Don't enforce existence of docstrings
]
extend-unsafe-fixes = ["F401"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
known-first-party = ["tests"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]
